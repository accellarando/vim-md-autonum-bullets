#!/usr/bin/python3
"""
@Author: logic
@Date: 20190623
@Desc: Automatically adding number for markdown file.
 - format: $cli format --input={file_path}
 - clean: $cli clean --input={file_path}
 - add: $cli add --input={file_path}
"""

import re
import click
import sys

HEAD_RE = re.compile('^#+')
initial_num_level = [0, 1, 1, 1, 1]  # 4 level: 0.1.1.1 => 5 level: 0.1.1.1.1 => ...

def __reset_sub_levels(level, index):
    level[index:] = initial_num_level[index:]
    return level

def __clean(content):
    lines = content.split('\n')
    length = len(lines)
    for i in range(length):
        line = lines[i]
        if HEAD_RE.match(line):
            lines[i] = re.sub(r'^\s*(#+)\s+(\d+\.)+\s+', r'\1 ', line, 1)
    print('\n'.join(lines))

def __add(content):
    num_level = list(initial_num_level)
    lines = content.split('\n')
    length = len(lines)

    last_head_len = 1
    code_tag_cnt = 0
    for i in range(length):
        line = lines[i]
        if re.match(r'\s*```',line):
            code_tag_cnt += 1
        if code_tag_cnt%2 == 0 and HEAD_RE.match(line): # filter # in code paragraph
            head = re.match(r'^#+', line).group()
            head_len = len(head)
            if head_len <= last_head_len:
                num_level = __reset_sub_levels(num_level, head_len)
                num_level[head_len - 1] = num_level[head_len - 1] + 1
            last_head_len = head_len

            number_str = '.'.join([str(i) for i in num_level[:head_len]]) + '.'
            number_str = re.sub(r'\.+$', '.', number_str)
            lines[i] = re.sub(r'^(#+)\s+', r'\1 %s ' % number_str, line)
    print('\n'.join(lines))


@click.group()
def cli():
    pass

@click.command()
def clean():
    """
    # clean number
    """
    __clean(sys.stdin.read())

@click.command()
def add():
    """
    # add number
    """
    __add(sys.stdin.read())

# pack command
cli.add_command(clean)
cli.add_command(add)

if __name__ == '__main__':
    cli()

